{"version":3,"sources":["Header.js","App.js","index.js"],"names":["Header","date","Date","day","getDate","month","getMonth","year","getFullYear","className","App","handleInput","e","value","target","setState","length","onAdd","state","user","userTasks","push","handleRemoveTask","currentIndex","newTask","splicedArray","splice","handleTaskDone","taskDone","this","onKeypress","type","placeholder","onInput","onClick","map","task","index","style","backgroundColor","Component","ReactDOM","render","document","getElementById"],"mappings":"wOAkBeA,EAfA,WACb,IAAMC,EAAO,IAAIC,KACbC,EAAMF,EAAKG,UACXC,EAAQJ,EAAKK,WACbC,EAAON,EAAKO,cAEhB,OACE,sBAAKC,UAAU,mBAAf,UACE,cAAC,IAAD,CAAQA,UAAU,YAClB,qBAAKA,UAAU,QAAf,mBACA,qBAAKA,UAAU,OAAf,mBAA0BN,EAA1B,YAAiCE,EAAQ,EAAzC,YAA8CE,SC0HrCG,E,kDA/Hb,aAAe,IAAD,8BACZ,gBAQFC,YAAc,SAACC,GACb,IAAMC,EAAQD,EAAEE,OAAOD,MACvB,EAAKE,SAAS,CAAEF,UACZA,EAAMG,QAZE,EAsBdC,MAAQ,SAACL,GACP,IAAMC,EAAQ,EAAKK,MAAML,MACnBM,EAAO,EAAKD,MAAME,UACpBP,EAAMG,OAAS,IACjBG,EAAKE,KAAKR,GACV,EAAKE,SAAS,CAAEK,UAAWD,KAE7B,EAAKJ,SAAS,CAAEF,MAAO,MA7BX,EA+BdS,iBAAmB,SAACV,EAAGW,GACrB,IAAMC,EAAU,EAAKN,MAAME,UACrBK,EAAeD,EAAQE,OAAOH,EAAc,GAClD,EAAKL,MAAMO,aAAaJ,KAAKI,GAC7B,EAAKV,SAAS,CAAEK,UAAWI,KAnCf,EAqCdG,eAAiB,SAACf,EAAGW,GACfA,IACF,EAAKR,SAAS,CAAEa,SAAUL,IACtB,EAAKL,MAAMU,WAAaL,GAC1B,EAAKR,SAAS,CAAEa,UAAW,MAvC/B,EAAKV,MAAQ,CACXL,MAAO,GACPO,UAAW,GACXK,aAAc,GACdG,UAAW,GAND,E,0CA6Cd,WACE,IACEjB,EAKEkB,KALFlB,YACAM,EAIEY,KAJFZ,MACAK,EAGEO,KAHFP,iBACAK,EAEEE,KAFFF,eAGF,GADIE,KADFC,WAEqCD,KAAKX,OAApCL,EAAR,EAAQA,MAAOO,EAAf,EAAeA,UAAWQ,EAA1B,EAA0BA,SAC1B,OACE,sBAAKnB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,SAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,WAAf,UACE,oBAAIA,UAAU,KAAd,8BACA,oBAAGA,UAAU,OAAb,uBAEE,uBAFF,8BAKF,sBAAKA,UAAU,WAAf,UACE,uBACEsB,KAAK,OACLtB,UAAU,QACVuB,YAAY,eACZC,QAAS,SAACrB,GAAD,OAAOD,EAAYC,IAC5BC,MAAOA,IAGT,wBACEkB,KAAK,SACLtB,UAAU,UACVyB,QAAS,SAACtB,GAAD,OAAOK,EAAML,IAHxB,SAKE,cAAC,IAAD,CAAcH,UAAU,iBAG5B,8BACGW,EAAUe,KAAI,SAACC,EAAMC,GACpB,IAAMd,EAAec,EACrB,OACE,sBAAK5B,UAAU,WAAf,UACE,qBACEA,UAAU,WACV6B,MAAO,CACLC,gBACEX,IAAaS,EAAQ,MAAQ,iBAJnC,SAOGD,IAEH,gCACE,wBACEF,QAAS,SAACtB,GAAD,OAAOe,EAAef,EAAGW,IAClCd,UAAU,WAFZ,SAIE,4BACE,cAAC,IAAD,CAAaA,UAAU,cAG3B,wBACEsB,KAAK,SACLtB,UAAU,aACVyB,QAAS,SAACtB,GAAD,OAAOU,EAAiBV,EAAGW,IAHtC,SAKE,4BACE,cAAC,IAAD,CAAgBd,UAAU,sC,GAjHlC+B,aCHlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.55dea322.chunk.js","sourcesContent":["import React from \"react\";\nimport { FaBars } from \"react-icons/fa\";\n\nconst Header = () => {\n  const date = new Date();\n  var day = date.getDate();\n  var month = date.getMonth();\n  var year = date.getFullYear();\n\n  return (\n    <div className=\"header-container\">\n      <FaBars className=\"fa-icon\" />\n      <div className=\"today\">Today</div>\n      <div className=\"date\">{`${day}/${month + 1}/${year}`}</div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { BsPlusSquare } from \"react-icons/bs\";\nimport { GiCheckMark } from \"react-icons/gi\";\nimport { ImCancelCircle } from \"react-icons/im\";\nimport Header from \"./Header\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: \"\",\n      userTasks: [],\n      splicedArray: [],\n      taskDone: -1,\n    };\n  }\n  handleInput = (e) => {\n    const value = e.target.value;\n    this.setState({ value });\n    if (value.length > 2) {\n    }\n  };\n  // onKeypress = (e) => {\n  //   var key = e.key;\n  //   console.log(key);\n  //   if (e.keyCode > 9) {\n  //     e.preventDefault();\n  //   }\n  // };\n  onAdd = (e) => {\n    const value = this.state.value;\n    const user = this.state.userTasks;\n    if (value.length > 0) {\n      user.push(value);\n      this.setState({ userTasks: user });\n    }\n    this.setState({ value: \"\" });\n  };\n  handleRemoveTask = (e, currentIndex) => {\n    const newTask = this.state.userTasks;\n    const splicedArray = newTask.splice(currentIndex, 1);\n    this.state.splicedArray.push(splicedArray);\n    this.setState({ userTasks: newTask });\n  };\n  handleTaskDone = (e, currentIndex) => {\n    if (currentIndex) {\n      this.setState({ taskDone: currentIndex });\n      if (this.state.taskDone === currentIndex) {\n        this.setState({ taskDone: -1 });\n      }\n    }\n  };\n  render() {\n    const {\n      handleInput,\n      onAdd,\n      handleRemoveTask,\n      handleTaskDone,\n      onKeypress,\n    } = this;\n    const { value, userTasks, taskDone } = this.state;\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"master\">\n          <div className=\"container\">\n            <div className=\"text-div\">\n              <h1 className=\"h1\">Make a todo list</h1>\n              <p className=\"text\">\n                completing\n                <br /> your task is out joy\n              </p>\n            </div>\n            <div className=\"inputDiv\">\n              <input\n                type=\"text\"\n                className=\"input\"\n                placeholder=\"Add new task\"\n                onInput={(e) => handleInput(e)}\n                value={value}\n                // onKeyPress={(e) => onKeypress(e)}\n              />\n              <button\n                type=\"button\"\n                className=\"btn-Add\"\n                onClick={(e) => onAdd(e)}\n              >\n                <BsPlusSquare className=\"bs-Icon\" />\n              </button>\n            </div>\n            <div>\n              {userTasks.map((task, index) => {\n                const currentIndex = index;\n                return (\n                  <div className=\"task-div\">\n                    <div\n                      className=\"eachTask\"\n                      style={{\n                        backgroundColor:\n                          taskDone === index ? \"red\" : \"darkslateblue\",\n                      }}\n                    >\n                      {task}\n                    </div>\n                    <div>\n                      <button\n                        onClick={(e) => handleTaskDone(e, currentIndex)}\n                        className=\"btn-done\"\n                      >\n                        <i>\n                          <GiCheckMark className=\"check\" />\n                        </i>\n                      </button>\n                      <button\n                        type=\"button\"\n                        className=\"remove-Btn\"\n                        onClick={(e) => handleRemoveTask(e, currentIndex)}\n                      >\n                        <i>\n                          <ImCancelCircle className=\"remove\" />\n                        </i>\n                      </button>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//Create a userinput\n//create a state that saves the userinput\n//create the tasklist\n//add and remove task\n//check if task is completed\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}